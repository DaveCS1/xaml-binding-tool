<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="100" xml:space="preserve">
    <value>XAML Binding Failures</value>
    <comment>Tools options name</comment>
  </data>
  <data name="Description.BadConverterAtTransfer" xml:space="preserve">
    <value>Failed to convert value '{0}' to the target type. The fallback value will be used if it's available.{1}</value>
  </data>
  <data name="Description.BadValueAtTransfer" xml:space="preserve">
    <value>Value '{0}' cannot be assigned to property {1}, type={2}</value>
  </data>
  <data name="Description.CannotCreateDefaultValueConverter" xml:space="preserve">
    <value>Cannot convert from type '{0}' to '{1}'. Consider setting a converter on the binding.</value>
  </data>
  <data name="Description.CannotGetClrRawValue" xml:space="preserve">
    <value>Failed to get value.{0}</value>
  </data>
  <data name="Description.ClrReplaceItem" xml:space="preserve">
    <value>{0} property not found on type {1}</value>
  </data>
  <data name="Description.MissingInfo" xml:space="preserve">
    <value>Cannot retrieve value due to missing information.</value>
  </data>
  <data name="Description.NoMentor" xml:space="preserve">
    <value>Cannot find governing FrameworkElement or FrameworkContentElement for target element.</value>
  </data>
  <data name="Description.NoSource" xml:space="preserve">
    <value>Cannot find source: {0}</value>
  </data>
  <data name="Description.NoValueToTransfer" xml:space="preserve">
    <value>Cannot retrieve value and no fallback value exists, using the default value instead.</value>
  </data>
  <data name="Description.NullDataItem" xml:space="preserve">
    <value>Cannot retrieve value from a null data item. This could happen when the binding is detached or when binding to a Nullable type that has no value.</value>
  </data>
  <data name="Description.NullItem" xml:space="preserve">
    <value>'{0}' property not found for '{1}' because data item is null. This could happen because the data provider has not produced any data yet.</value>
  </data>
  <data name="Header.BindingPath" xml:space="preserve">
    <value>Binding Path</value>
  </data>
  <data name="Header.Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="Header.Count" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="Header.DataContextType" xml:space="preserve">
    <value>Data Context Type</value>
  </data>
  <data name="Header.Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Header.Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Header.TargetType" xml:space="preserve">
    <value>Target Type</value>
  </data>
  <data name="OptionsCategoryForNewFailures" xml:space="preserve">
    <value>For new failures</value>
  </data>
  <data name="OptionsDescriptionFlashWindow" xml:space="preserve">
    <value>Flash the Visual Studio window whenever a failure is added to the list</value>
  </data>
  <data name="OptionsDescriptionPlaySound" xml:space="preserve">
    <value>Plays a notification sound whenever a failure is added to the list</value>
  </data>
  <data name="OptionsDescriptionShowPane" xml:space="preserve">
    <value>Shows the XAML Binding Failures tool window pane when there is a new error</value>
  </data>
  <data name="OptionsNameFlashWindow" xml:space="preserve">
    <value>Flash window</value>
  </data>
  <data name="OptionsNamePlaySound" xml:space="preserve">
    <value>Play sound</value>
  </data>
  <data name="OptionsNameShowPane" xml:space="preserve">
    <value>Show tool window pane</value>
  </data>
  <data name="ToolWindow.Title" xml:space="preserve">
    <value>XAML Binding Failures</value>
  </data>
  <data name="ToolWindow.TitleLoading" xml:space="preserve">
    <value>XAML Binding Failures (loading)</value>
  </data>
  <data name="TraceLevels" xml:space="preserve">
    <value>Off,Critical,Error,Warning,Information,Verbose,Activity,All</value>
  </data>
</root>